// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Libposemesh

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DownloadDomainDataReq struct {
	_tab flatbuffers.Table
}

func GetRootAsDownloadDomainDataReq(buf []byte, offset flatbuffers.UOffsetT) *DownloadDomainDataReq {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DownloadDomainDataReq{}
	x.Init(buf, n+offset)
	return x
}

func FinishDownloadDomainDataReqBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDownloadDomainDataReq(buf []byte, offset flatbuffers.UOffsetT) *DownloadDomainDataReq {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DownloadDomainDataReq{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDownloadDomainDataReqBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DownloadDomainDataReq) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DownloadDomainDataReq) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DownloadDomainDataReq) DomainId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DownloadDomainDataReq) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DownloadDomainDataReq) Type() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DownloadDomainDataReq) MutateType(n int8) bool {
	return rcv._tab.MutateInt8Slot(8, n)
}

func DownloadDomainDataReqStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func DownloadDomainDataReqAddDomainId(builder *flatbuffers.Builder, domainId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(domainId), 0)
}
func DownloadDomainDataReqAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func DownloadDomainDataReqAddType(builder *flatbuffers.Builder, type_ int8) {
	builder.PrependInt8Slot(2, type_, 0)
}
func DownloadDomainDataReqEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

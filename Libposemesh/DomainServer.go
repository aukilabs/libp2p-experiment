// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Libposemesh

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DomainServer struct {
	_tab flatbuffers.Table
}

func GetRootAsDomainServer(buf []byte, offset flatbuffers.UOffsetT) *DomainServer {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DomainServer{}
	x.Init(buf, n+offset)
	return x
}

func FinishDomainServerBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDomainServer(buf []byte, offset flatbuffers.UOffsetT) *DomainServer {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DomainServer{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDomainServerBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DomainServer) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DomainServer) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DomainServer) Info(obj *NodeInfo) *NodeInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(NodeInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DomainServer) DataSizeLimit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DomainServer) RequestSizeLimit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DomainServer) DataTypeBlacklist(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DomainServer) DataTypeBlacklistLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *DomainServer) DataTypeHandlers(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DomainServer) DataTypeHandlersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func DomainServerStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func DomainServerAddInfo(builder *flatbuffers.Builder, info flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(info), 0)
}
func DomainServerAddDataSizeLimit(builder *flatbuffers.Builder, dataSizeLimit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(dataSizeLimit), 0)
}
func DomainServerAddRequestSizeLimit(builder *flatbuffers.Builder, requestSizeLimit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(requestSizeLimit), 0)
}
func DomainServerAddDataTypeBlacklist(builder *flatbuffers.Builder, dataTypeBlacklist flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(dataTypeBlacklist), 0)
}
func DomainServerStartDataTypeBlacklistVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DomainServerAddDataTypeHandlers(builder *flatbuffers.Builder, dataTypeHandlers flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(dataTypeHandlers), 0)
}
func DomainServerStartDataTypeHandlersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DomainServerEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

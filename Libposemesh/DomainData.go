// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Libposemesh

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DomainData struct {
	_tab flatbuffers.Table
}

func GetRootAsDomainData(buf []byte, offset flatbuffers.UOffsetT) *DomainData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DomainData{}
	x.Init(buf, n+offset)
	return x
}

func FinishDomainDataBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsDomainData(buf []byte, offset flatbuffers.UOffsetT) *DomainData {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DomainData{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDomainDataBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *DomainData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DomainData) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DomainData) DataOffset() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DomainData) MutateDataOffset(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *DomainData) DomainId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DomainData) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DomainData) Version() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DomainData) DataType() AnyDomainData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return AnyDomainData(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *DomainData) MutateDataType(n AnyDomainData) bool {
	return rcv._tab.MutateByteSlot(14, byte(n))
}

func (rcv *DomainData) Data(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func DomainDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func DomainDataAddDataOffset(builder *flatbuffers.Builder, dataOffset uint32) {
	builder.PrependUint32Slot(0, dataOffset, 0)
}
func DomainDataAddDomainId(builder *flatbuffers.Builder, domainId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(domainId), 0)
}
func DomainDataAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(name), 0)
}
func DomainDataAddVersion(builder *flatbuffers.Builder, version flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(version), 0)
}
func DomainDataAddDataType(builder *flatbuffers.Builder, dataType AnyDomainData) {
	builder.PrependByteSlot(5, byte(dataType), 0)
}
func DomainDataAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(data), 0)
}
func DomainDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

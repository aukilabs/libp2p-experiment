// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Libposemesh

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type NodeInfo struct {
	_tab flatbuffers.Struct
}

func (rcv *NodeInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NodeInfo) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *NodeInfo) Id() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *NodeInfo) MutateId(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *NodeInfo) Name() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(1))
}
func (rcv *NodeInfo) MutateName(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(1), n)
}

func (rcv *NodeInfo) Type() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(2))
}
func (rcv *NodeInfo) MutateType(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(2), n)
}

func (rcv *NodeInfo) Latency() int64 {
	return rcv._tab.GetInt64(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *NodeInfo) MutateLatency(n int64) bool {
	return rcv._tab.MutateInt64(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func (rcv *NodeInfo) Cpu() int32 {
	return rcv._tab.GetInt32(rcv._tab.Pos + flatbuffers.UOffsetT(16))
}
func (rcv *NodeInfo) MutateCpu(n int32) bool {
	return rcv._tab.MutateInt32(rcv._tab.Pos+flatbuffers.UOffsetT(16), n)
}

func (rcv *NodeInfo) Gpu() int32 {
	return rcv._tab.GetInt32(rcv._tab.Pos + flatbuffers.UOffsetT(20))
}
func (rcv *NodeInfo) MutateGpu(n int32) bool {
	return rcv._tab.MutateInt32(rcv._tab.Pos+flatbuffers.UOffsetT(20), n)
}

func (rcv *NodeInfo) Memory() byte {
	return rcv._tab.GetByte(rcv._tab.Pos + flatbuffers.UOffsetT(24))
}
func (rcv *NodeInfo) MutateMemory(n byte) bool {
	return rcv._tab.MutateByte(rcv._tab.Pos+flatbuffers.UOffsetT(24), n)
}

func CreateNodeInfo(builder *flatbuffers.Builder, id byte, name byte, type_ byte, latency int64, cpu int32, gpu int32, memory byte) flatbuffers.UOffsetT {
	builder.Prep(8, 32)
	builder.Pad(7)
	builder.PrependByte(memory)
	builder.PrependInt32(gpu)
	builder.PrependInt32(cpu)
	builder.PrependInt64(latency)
	builder.Pad(5)
	builder.PrependByte(type_)
	builder.PrependByte(name)
	builder.PrependByte(id)
	return builder.Offset()
}

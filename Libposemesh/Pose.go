// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Libposemesh

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Pose struct {
	_tab flatbuffers.Table
}

func GetRootAsPose(buf []byte, offset flatbuffers.UOffsetT) *Pose {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Pose{}
	x.Init(buf, n+offset)
	return x
}

func FinishPoseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPose(buf []byte, offset flatbuffers.UOffsetT) *Pose {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Pose{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPoseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Pose) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Pose) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Pose) Px() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Pose) MutatePx(n float32) bool {
	return rcv._tab.MutateFloat32Slot(4, n)
}

func (rcv *Pose) Py() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Pose) MutatePy(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *Pose) Pz() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Pose) MutatePz(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func (rcv *Pose) Rx() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Pose) MutateRx(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

func (rcv *Pose) Ry() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Pose) MutateRy(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func (rcv *Pose) Rz() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Pose) MutateRz(n float32) bool {
	return rcv._tab.MutateFloat32Slot(14, n)
}

func (rcv *Pose) Rw() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Pose) MutateRw(n float32) bool {
	return rcv._tab.MutateFloat32Slot(16, n)
}

func (rcv *Pose) ShortId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func PoseStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func PoseAddPx(builder *flatbuffers.Builder, px float32) {
	builder.PrependFloat32Slot(0, px, 0.0)
}
func PoseAddPy(builder *flatbuffers.Builder, py float32) {
	builder.PrependFloat32Slot(1, py, 0.0)
}
func PoseAddPz(builder *flatbuffers.Builder, pz float32) {
	builder.PrependFloat32Slot(2, pz, 0.0)
}
func PoseAddRx(builder *flatbuffers.Builder, rx float32) {
	builder.PrependFloat32Slot(3, rx, 0.0)
}
func PoseAddRy(builder *flatbuffers.Builder, ry float32) {
	builder.PrependFloat32Slot(4, ry, 0.0)
}
func PoseAddRz(builder *flatbuffers.Builder, rz float32) {
	builder.PrependFloat32Slot(5, rz, 0.0)
}
func PoseAddRw(builder *flatbuffers.Builder, rw float32) {
	builder.PrependFloat32Slot(6, rw, 0.0)
}
func PoseAddShortId(builder *flatbuffers.Builder, shortId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(shortId), 0)
}
func PoseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

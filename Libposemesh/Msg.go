// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Libposemesh

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Msg struct {
	_tab flatbuffers.Table
}

func GetRootAsMsg(buf []byte, offset flatbuffers.UOffsetT) *Msg {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Msg{}
	x.Init(buf, n+offset)
	return x
}

func FinishMsgBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsMsg(buf []byte, offset flatbuffers.UOffsetT) *Msg {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Msg{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMsgBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Msg) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Msg) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Msg) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Msg) DataType() AnyMsg {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return AnyMsg(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Msg) MutateDataType(n AnyMsg) bool {
	return rcv._tab.MutateByteSlot(6, byte(n))
}

func (rcv *Msg) Data(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func MsgStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func MsgAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func MsgAddDataType(builder *flatbuffers.Builder, dataType AnyMsg) {
	builder.PrependByteSlot(1, byte(dataType), 0)
}
func MsgAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(data), 0)
}
func MsgEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
